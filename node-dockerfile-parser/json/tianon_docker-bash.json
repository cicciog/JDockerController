{"docker":[{"name":"FROM","lineno":1,"args":"alpine:3.11","raw":"FROM alpine:3.11"},{"name":"ENV","lineno":4,"args":{"_BASH_GPG_KEY":"7C0135FB088AAF6C66C650B9BB5869F064EA74AB"},"raw":"ENV _BASH_GPG_KEY 7C0135FB088AAF6C66C650B9BB5869F064EA74AB"},{"name":"C=M;O=D","lineno":7,"args":"","raw":"C=M;O=D"},{"name":"ENV","lineno":8,"args":{"_BASH_VERSION":"5.0"},"raw":"ENV _BASH_VERSION 5.0"},{"name":"ENV","lineno":9,"args":{"_BASH_PATCH_LEVEL":"0"},"raw":"ENV _BASH_PATCH_LEVEL 0"},{"name":"C=M;O=D","lineno":11,"args":"","raw":"C=M;O=D"},{"name":"ENV","lineno":12,"args":{"_BASH_LATEST_PATCH":"16"},"raw":"ENV _BASH_LATEST_PATCH 16"},{"name":"RUN","lineno":89,"args":"set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tmake \t\tncurses-dev \t\tpatch \t\ttar \t; \t\tversion=\"$_BASH_VERSION\"; \tif [ \"$_BASH_PATCH_LEVEL\" -gt 0 ]; then \t\tversion=\"$version.$_BASH_PATCH_LEVEL\"; \tfi; \twget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz\"; \twget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz.sig\"; \t\tif [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_PATCH_LEVEL\" ]; then \t\tmkdir -p bash-patches; \t\tfirst=\"$(printf '%03d' \"$(( _BASH_PATCH_LEVEL + 1 ))\")\"; \t\tlast=\"$(printf '%03d' \"$_BASH_LATEST_PATCH\")\"; \t\tfor patch in $(seq -w \"$first\" \"$last\"); do \t\t\turl=\"https://ftp.gnu.org/gnu/bash/bash-$_BASH_VERSION-patches/bash${_BASH_VERSION//./}-$patch\"; \t\t\twget -O \"bash-patches/$patch\" \"$url\"; \t\t\twget -O \"bash-patches/$patch.sig\" \"$url.sig\"; \t\tdone; \tfi; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$_BASH_GPG_KEY\"; \tgpg --batch --verify bash.tar.gz.sig bash.tar.gz; \tgpgconf --kill all; \trm bash.tar.gz.sig; \tif [ -d bash-patches ]; then \t\tfor sig in bash-patches/*.sig; do \t\t\tp=\"${sig%.sig}\"; \t\t\tgpg --batch --verify \"$sig\" \"$p\"; \t\t\trm \"$sig\"; \t\tdone; \tfi; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p /usr/src/bash; \ttar \t\t--extract \t\t--file=bash.tar.gz \t\t--strip-components=1 \t\t--directory=/usr/src/bash \t; \trm bash.tar.gz; \t\tif [ -d bash-patches ]; then \t\tfor p in bash-patches/*; do \t\t\tpatch \t\t\t\t--directory=/usr/src/bash \t\t\t\t--input=\"$(readlink -f \"$p\")\" \t\t\t\t--strip=0 \t\t\t; \t\t\trm \"$p\"; \t\tdone; \t\trmdir bash-patches; \tfi; \t\tcd /usr/src/bash; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t./configure \t\t--build=\"$gnuArch\" \t\t--enable-readline \t\t--with-curses # musl does not implement brk/sbrk (they simply return -ENOMEM)","raw":"RUN set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tmake \t\tncurses-dev \t\tpatch \t\ttar \t; \t\tversion=\"$_BASH_VERSION\"; \tif [ \"$_BASH_PATCH_LEVEL\" -gt 0 ]; then \t\tversion=\"$version.$_BASH_PATCH_LEVEL\"; \tfi; \twget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz\"; \twget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz.sig\"; \t\tif [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_PATCH_LEVEL\" ]; then \t\tmkdir -p bash-patches; \t\tfirst=\"$(printf '%03d' \"$(( _BASH_PATCH_LEVEL + 1 ))\")\"; \t\tlast=\"$(printf '%03d' \"$_BASH_LATEST_PATCH\")\"; \t\tfor patch in $(seq -w \"$first\" \"$last\"); do \t\t\turl=\"https://ftp.gnu.org/gnu/bash/bash-$_BASH_VERSION-patches/bash${_BASH_VERSION//./}-$patch\"; \t\t\twget -O \"bash-patches/$patch\" \"$url\"; \t\t\twget -O \"bash-patches/$patch.sig\" \"$url.sig\"; \t\tdone; \tfi; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$_BASH_GPG_KEY\"; \tgpg --batch --verify bash.tar.gz.sig bash.tar.gz; \tgpgconf --kill all; \trm bash.tar.gz.sig; \tif [ -d bash-patches ]; then \t\tfor sig in bash-patches/*.sig; do \t\t\tp=\"${sig%.sig}\"; \t\t\tgpg --batch --verify \"$sig\" \"$p\"; \t\t\trm \"$sig\"; \t\tdone; \tfi; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p /usr/src/bash; \ttar \t\t--extract \t\t--file=bash.tar.gz \t\t--strip-components=1 \t\t--directory=/usr/src/bash \t; \trm bash.tar.gz; \t\tif [ -d bash-patches ]; then \t\tfor p in bash-patches/*; do \t\t\tpatch \t\t\t\t--directory=/usr/src/bash \t\t\t\t--input=\"$(readlink -f \"$p\")\" \t\t\t\t--strip=0 \t\t\t; \t\t\trm \"$p\"; \t\tdone; \t\trmdir bash-patches; \tfi; \t\tcd /usr/src/bash; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t./configure \t\t--build=\"$gnuArch\" \t\t--enable-readline \t\t--with-curses # musl does not implement brk/sbrk (they simply return -ENOMEM)"},{"name":"--WITHOUT-BASH-MALLOC","lineno":101,"args":"|| { \t\tcat >&2 config.log; \t\tfalse; \t}; \tmake -j \"$(nproc)\"; \tmake install; \tcd /; \trm -r /usr/src/bash; \t# delete a few installed bits for smaller image size","raw":"--without-bash-malloc \t|| { \t\tcat >&2 config.log; \t\tfalse; \t}; \tmake -j \"$(nproc)\"; \tmake install; \tcd /; \trm -r /usr/src/bash; \t# delete a few installed bits for smaller image size"},{"name":"RM","lineno":120,"args":"-r \t\t/usr/local/share/doc/bash/*.html \t\t/usr/local/share/info \t\t/usr/local/share/locale \t\t/usr/local/share/man \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --no-cache --virtual .bash-rundeps $runDeps; \tapk del .build-deps; \t\t[ \"$(which bash)\" = '/usr/local/bin/bash' ]; \tbash --version; \t[ \"$(bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"')\" = \"${_BASH_VERSION%%-*}.$_BASH_LATEST_PATCH\" ];","raw":"rm -r \t\t/usr/local/share/doc/bash/*.html \t\t/usr/local/share/info \t\t/usr/local/share/locale \t\t/usr/local/share/man \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --no-cache --virtual .bash-rundeps $runDeps; \tapk del .build-deps; \t\t[ \"$(which bash)\" = '/usr/local/bin/bash' ]; \tbash --version; \t[ \"$(bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"')\" = \"${_BASH_VERSION%%-*}.$_BASH_LATEST_PATCH\" ];"},{"name":"COPY","lineno":122,"args":["docker-entrypoint.sh","/usr/local/bin/"],"raw":"COPY docker-entrypoint.sh /usr/local/bin/"},{"name":"ENTRYPOINT","lineno":123,"args":["docker-entrypoint.sh"],"raw":"ENTRYPOINT [\"docker-entrypoint.sh\"]"},{"name":"CMD","lineno":124,"args":["bash"],"raw":"CMD [\"bash\"]"}]}