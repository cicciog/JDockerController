{"docker":[{"name":"FROM","lineno":2,"args":"debian:stretch-slim","raw":"FROM debian:stretch-slim"},{"name":"RUN","lineno":12,"args":"set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi","raw":"RUN set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"},{"name":"RUN","lineno":17,"args":"set -eux; \tgroupadd -r postgres --gid=999; # https://salsa.debian.org/postgresql/postgresql-common/blob/997d842ee744687d99a2b2d95c1083a2615c79e8/debian/postgresql-common.postinst#L32-35","raw":"RUN set -eux; \tgroupadd -r postgres --gid=999; # https://salsa.debian.org/postgresql/postgresql-common/blob/997d842ee744687d99a2b2d95c1083a2615c79e8/debian/postgresql-common.postinst#L32-35"},{"name":"USERADD","lineno":19,"args":"-r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; # also create the postgres user's home directory with appropriate permissions","raw":"useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; # also create the postgres user's home directory with appropriate permissions"},{"name":"MKDIR","lineno":22,"args":"-p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql","raw":"mkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"},{"name":"ENV","lineno":25,"args":{"GOSU_VERSION":"1.11"},"raw":"ENV GOSU_VERSION 1.11"},{"name":"RUN","lineno":37,"args":"set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget","raw":"RUN set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"},{"name":"RUN","lineno":42,"args":"set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then # if this file exists, we're likely in \"debian:xxx-slim\", and locales are thus being excluded so we need to remove that exclusion (since we need locales)","raw":"RUN set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then # if this file exists, we're likely in \"debian:xxx-slim\", and locales are thus being excluded so we need to remove that exclusion (since we need locales)"},{"name":"GREP","lineno":48,"args":"-q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8","raw":"grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"},{"name":"ENV","lineno":49,"args":{"LANG":"en_US.utf8"},"raw":"ENV LANG en_US.utf8"},{"name":"RUN","lineno":54,"args":"set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends # install \"nss_wrapper\" in case we need to fake \"/etc/passwd\" and \"/etc/group\" (especially for OpenShift)","raw":"RUN set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends # install \"nss_wrapper\" in case we need to fake \"/etc/passwd\" and \"/etc/group\" (especially for OpenShift)"},{"name":"LIBNSS-WRAPPER","lineno":58,"args":"# install \"xz-utils\" for .sql.xz docker-entrypoint-initdb.d files","raw":"libnss-wrapper # install \"xz-utils\" for .sql.xz docker-entrypoint-initdb.d files"},{"name":"XZ-UTILS","lineno":61,"args":"; \trm -rf /var/lib/apt/lists/*","raw":"xz-utils \t; \trm -rf /var/lib/apt/lists/*"},{"name":"RUN","lineno":63,"args":"mkdir /docker-entrypoint-initdb.d","raw":"RUN mkdir /docker-entrypoint-initdb.d"},{"name":"RUN","lineno":66,"args":"set -ex; # pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]","raw":"RUN set -ex; # pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]"},{"name":"KEY='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';","lineno":75,"args":"export GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list","raw":"key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"},{"name":"ENV","lineno":77,"args":{"PG_MAJOR":"10"},"raw":"ENV PG_MAJOR 10"},{"name":"ENV","lineno":78,"args":{"PG_VERSION":"10.12-2.pgdg90+1"},"raw":"ENV PG_VERSION 10.12-2.pgdg90+1"},{"name":"RUN","lineno":82,"args":"set -ex; \t# see note below about \"*.pyc\" files","raw":"RUN set -ex; \t# see note below about \"*.pyc\" files"},{"name":"EXPORT","lineno":88,"args":"PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) # arches officialy built by upstream","raw":"export PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) # arches officialy built by upstream"},{"name":"ECHO","lineno":93,"args":"\"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) # we're on an architecture upstream doesn't officially build for","raw":"echo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) # we're on an architecture upstream doesn't officially build for"},{"name":"ECHO","lineno":100,"args":"\"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) # https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)","raw":"echo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) # https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)"},{"name":"ECHO","lineno":111,"args":"'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t# build .deb files from upstream's source packages (which are verified by apt-get)","raw":"echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t# build .deb files from upstream's source packages (which are verified by apt-get)"},{"name":"APT-GET","lineno":122,"args":"update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; # we don't remove APT lists here because they get re-downloaded and removed later","raw":"apt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; # we don't remove APT lists here because they get re-downloaded and removed later"},{"name":"APT-MARK","lineno":129,"args":"showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)","raw":"apt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)"},{"name":"LS","lineno":134,"args":"-lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; # work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")","raw":"ls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; # work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")"},{"name":"APT-GET","lineno":151,"args":"-o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y --no-install-recommends postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y --no-install-recommends \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then # if we have leftovers from building, let's purge them (including extra, unnecessary build deps)","raw":"apt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y --no-install-recommends postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y --no-install-recommends \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then # if we have leftovers from building, let's purge them (including extra, unnecessary build deps)"},{"name":"APT-GET","lineno":156,"args":"purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t# some of the steps above generate a lot of \"*.pyc\" files (and setting \"PYTHONDONTWRITEBYTECODE\" beforehand doesn't propagate properly for some reason), so we clean them up manually (as long as they aren't owned by a package)","raw":"apt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t# some of the steps above generate a lot of \"*.pyc\" files (and setting \"PYTHONDONTWRITEBYTECODE\" beforehand doesn't propagate properly for some reason), so we clean them up manually (as long as they aren't owned by a package)"},{"name":"FIND","lineno":157,"args":"/usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +","raw":"find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"},{"name":"RUN","lineno":164,"args":"set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#","raw":"RUN set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#"},{"name":"(LISTEN_ADDRESSES)\\S*=\\S*\\S+.*!\\1","lineno":166,"args":"= '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample","raw":"(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"},{"name":"RUN","lineno":168,"args":"mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql","raw":"RUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"},{"name":"ENV","lineno":170,"args":{"PATH":"$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"},"raw":"ENV PATH $PATH:/usr/lib/postgresql/$PG_MAJOR/bin"},{"name":"ENV","lineno":171,"args":{"PGDATA":"/var/lib/postgresql/data"},"raw":"ENV PGDATA /var/lib/postgresql/data"},{"name":"RUN","lineno":173,"args":"mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\"","raw":"RUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""},{"name":"VOLUME","lineno":174,"args":["/var/lib/postgresql/data"],"raw":"VOLUME /var/lib/postgresql/data"},{"name":"COPY","lineno":176,"args":["docker-entrypoint.sh","/usr/local/bin/"],"raw":"COPY docker-entrypoint.sh /usr/local/bin/"},{"name":"RUN","lineno":177,"args":"ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat","raw":"RUN ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"},{"name":"ENTRYPOINT","lineno":178,"args":["docker-entrypoint.sh"],"raw":"ENTRYPOINT [\"docker-entrypoint.sh\"]"},{"name":"EXPOSE","lineno":180,"args":["5432"],"raw":"EXPOSE 5432"},{"name":"CMD","lineno":181,"args":["postgres"],"raw":"CMD [\"postgres\"]"}]}