{"docker":[{"name":"FROM","lineno":1,"args":"alpine:3.10","raw":"FROM alpine:3.10"},{"name":"LABEL","lineno":3,"args":{"maintainer":"\"NGINX Docker Maintainers <docker-maint@nginx.com>\""},"raw":"LABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\""},{"name":"ENV","lineno":5,"args":{"NGINX_VERSION":"1.16.1"},"raw":"ENV NGINX_VERSION 1.16.1"},{"name":"ENV","lineno":6,"args":{"NJS_VERSION":"0.3.8"},"raw":"ENV NJS_VERSION   0.3.8"},{"name":"ENV","lineno":7,"args":{"PKG_RELEASE":"1"},"raw":"ENV PKG_RELEASE   1"},{"name":"RUN","lineno":9,"args":"set -x \\n# create nginx user/group first, to be consistent throughout docker variants","raw":"RUN set -x \\n# create nginx user/group first, to be consistent throughout docker variants"},{"name":"&&","lineno":10,"args":"addgroup -g 101 -S nginx \\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\n    && apkArch=\"$(cat /etc/apk/arch)\" \\n    && nginxPackages=\" \\n        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \\n       nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \\n        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \\n        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \\n        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \\n    \" \\n    && case \"$apkArch\" in \\n        x86_64) \\n# arches officially built by upstream","raw":"&& addgroup -g 101 -S nginx \\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\n    && apkArch=\"$(cat /etc/apk/arch)\" \\n    && nginxPackages=\" \\n        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \\n       nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \\n        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \\n        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \\n        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \\n    \" \\n    && case \"$apkArch\" in \\n        x86_64) \\n# arches officially built by upstream"},{"name":"SET","lineno":11,"args":"-x \\n            && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\n            && apk add --no-cache --virtual .cert-deps \\n                openssl \\n            && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\n            && if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then \\n                echo \"key verification succeeded!\"; \\n                mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \\n            else \\n                echo \"key verification failed!\"; \\n                exit 1; \\n            fi \\n            && apk del .cert-deps \\n            && apk add -X \"https://nginx.org/packages/alpine/v$(egrep -o \"^[0-9]+.[0-9]+\" /etc/alpine-release)/main\" --no-cache $nginxPackages \\n            ;; \\n        *) \\n# we're on an architecture upstream doesn't officially build for","raw":"set -x \\n            && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\n            && apk add --no-cache --virtual .cert-deps \\n                openssl \\n            && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\n            && if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then \\n                echo \"key verification succeeded!\"; \\n                mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \\n            else \\n                echo \"key verification failed!\"; \\n                exit 1; \\n            fi \\n            && apk del .cert-deps \\n            && apk add -X \"https://nginx.org/packages/alpine/v$(egrep -o \"^[0-9]+.[0-9]+\" /etc/alpine-release)/main\" --no-cache $nginxPackages \\n            ;; \\n        *) \\n# we're on an architecture upstream doesn't officially build for"},{"name":"SET","lineno":13,"args":"-x \\n            && tempDir=\"$(mktemp -d)\" \\n            && chown nobody:nobody $tempDir \\n            && apk add --no-cache --virtual .build-deps \\n                gcc \\n               libc-dev \\n                make \\n                openssl-dev \\n                pcre-dev \\n                zlib-dev \\n                linux-headers \\n                libxslt-dev \\n                gd-dev \\n                geoip-dev \\n                perl-dev \\n                libedit-dev \\n               mercurial \\n                bash \\n               alpine-sdk \\n               findutils \\n           && su nobody -s /bin/sh -c \" \\n               export HOME=${tempDir} \\n                && cd ${tempDir} \\n                && hg clone https://hg.nginx.org/pkg-oss \\n                && cd pkg-oss \\n                && hg up -r 450 \\n                && cd alpine \\n                && make all \\n                && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\n                \" \\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\n            && apk del .build-deps \\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\n            ;;","raw":"set -x \\n            && tempDir=\"$(mktemp -d)\" \\n            && chown nobody:nobody $tempDir \\n            && apk add --no-cache --virtual .build-deps \\n                gcc \\n               libc-dev \\n                make \\n                openssl-dev \\n                pcre-dev \\n                zlib-dev \\n                linux-headers \\n                libxslt-dev \\n                gd-dev \\n                geoip-dev \\n                perl-dev \\n                libedit-dev \\n               mercurial \\n                bash \\n               alpine-sdk \\n               findutils \\n           && su nobody -s /bin/sh -c \" \\n               export HOME=${tempDir} \\n                && cd ${tempDir} \\n                && hg clone https://hg.nginx.org/pkg-oss \\n                && cd pkg-oss \\n                && hg up -r 450 \\n                && cd alpine \\n                && make all \\n                && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\n                \" \\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\n            && apk del .build-deps \\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\n            ;;"},{"name":"ESAC","lineno":14,"args":"","raw":"esac"},{"name":"&&","lineno":16,"args":"if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\nNaN    && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \\n# Bring in gettext so we can get `envsubst`, then throw","raw":"&& if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\nNaN    && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \\n# Bring in gettext so we can get `envsubst`, then throw"},{"name":"&&","lineno":20,"args":"apk add --no-cache --virtual .gettext gettext \\n    && mv /usr/bin/envsubst /tmp/ \\n","raw":"&& apk add --no-cache --virtual .gettext gettext \\n    && mv /usr/bin/envsubst /tmp/ \\n"},{"name":"&&","lineno":21,"args":"runDeps=\"$( \\n        scanelf --needed --nobanner /tmp/envsubst \\n            | awk \"{ gsub(/,/, \"","raw":"&& runDeps=\"$( \\n        scanelf --needed --nobanner /tmp/envsubst \\n            | awk \"{ gsub(/,/, \""},{"name":"SO:\",","lineno":22,"args":"$2); print \"so:\" $2 }\" \\n            | sort -u \\nNaN            | sort -u \\n      )\" \\n    && apk add --no-cache $runDeps \\n    && apk del .gettext \\n    && mv /tmp/envsubst /usr/local/bin/ \\n# Bring in tzdata so users could set the timezones through the environment# variables","raw":"so:\", $2); print \"so:\" $2 }\" \\n            | sort -u \\nNaN            | sort -u \\n      )\" \\n    && apk add --no-cache $runDeps \\n    && apk del .gettext \\n    && mv /tmp/envsubst /usr/local/bin/ \\n# Bring in tzdata so users could set the timezones through the environment# variables"},{"name":"&&","lineno":23,"args":"apk add --no-cache tzdata \\n# forward request and error logs to docker log collector","raw":"&& apk add --no-cache tzdata \\n# forward request and error logs to docker log collector"},{"name":"&&","lineno":24,"args":"ln -sf /dev/stdout /var/log/nginx/access.log \\n    && ln -sf /dev/stderr /var/log/nginx/error.log","raw":"&& ln -sf /dev/stdout /var/log/nginx/access.log \\n    && ln -sf /dev/stderr /var/log/nginx/error.log"},{"name":"EXPOSE","lineno":25,"args":["80"],"raw":"EXPOSE 80"},{"name":"STOPSIGNAL","lineno":27,"args":"SIGTERM","raw":"STOPSIGNAL SIGTERM"},{"name":"CMD","lineno":29,"args":["nginx","-g","daemon off;"],"raw":"CMD [\"nginx\", \"-g\", \"daemon off;\"]"}]}