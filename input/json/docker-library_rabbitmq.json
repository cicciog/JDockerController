{"docker":[{"name":"FROM","lineno":3,"args":"ubuntu:18.04","raw":"FROM ubuntu:18.04"},{"name":"RUN","lineno":8,"args":"set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends # grab gosu for easy step-down from root","raw":"RUN set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends # grab gosu for easy step-down from root"},{"name":"GOSU","lineno":12,"args":"; \trm -rf /var/lib/apt/lists/*; # verify that the \"gosu\" binary works","raw":"gosu \t; \trm -rf /var/lib/apt/lists/*; # verify that the \"gosu\" binary works"},{"name":"GOSU","lineno":13,"args":"nobody true","raw":"gosu nobody true"},{"name":"ARG","lineno":16,"args":["PGP_KEYSERVER=ha.pool.sks-keyservers.net"],"raw":"ARG PGP_KEYSERVER=ha.pool.sks-keyservers.net"},{"name":"ENV","lineno":22,"args":{"OPENSSL_VERSION":"1.1.1e"},"raw":"ENV OPENSSL_VERSION 1.1.1e"},{"name":"ENV","lineno":23,"args":{"OPENSSL_SOURCE_SHA256":"\"694f61ac11cb51c9bf73f54e771ff6022b0327a43bbdfa1b2f19de1662a6dcbe\""},"raw":"ENV OPENSSL_SOURCE_SHA256=\"694f61ac11cb51c9bf73f54e771ff6022b0327a43bbdfa1b2f19de1662a6dcbe\""},{"name":"ENV","lineno":25,"args":{"OPENSSL_PGP_KEY_IDS":"\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""},"raw":"ENV OPENSSL_PGP_KEY_IDS=\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""},{"name":"ENV","lineno":28,"args":{"OTP_VERSION":"22.3"},"raw":"ENV OTP_VERSION 22.3"},{"name":"ENV","lineno":31,"args":{"OTP_SOURCE_SHA256":"\"886e6dbe1e4823c7e8d9c9c1ba8315075a1a9f7717f5a1eaf3b98345ca6c798e\""},"raw":"ENV OTP_SOURCE_SHA256=\"886e6dbe1e4823c7e8d9c9c1ba8315075a1a9f7717f5a1eaf3b98345ca6c798e\""},{"name":"RUN","lineno":59,"args":"set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tautoconf \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibncurses5-dev \t\tmake \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t# Required by the crypto & ssl Erlang/OTP applications","raw":"RUN set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tautoconf \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibncurses5-dev \t\tmake \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t# Required by the crypto & ssl Erlang/OTP applications"},{"name":"WGET","lineno":73,"args":"--progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t# Configure OpenSSL for compilation","raw":"wget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t# Configure OpenSSL for compilation"},{"name":"CD","lineno":75,"args":"\"$OPENSSL_PATH\"; # without specifying \"--libdir\", Erlang will fail during \"crypto:supports()\" looking for a \"pthread_atfork\" function that doesn't exist (but only on arm32v7/armhf","raw":"cd \"$OPENSSL_PATH\"; # without specifying \"--libdir\", Erlang will fail during \"crypto:supports()\" looking for a \"pthread_atfork\" function that doesn't exist (but only on arm32v7/armhf"},{"name":")","lineno":77,"args":"","raw":")"},{"name":"DEBMULTIARCH=\"$(DPKG-ARCHITECTURE","lineno":79,"args":"--query DEB_HOST_MULTIARCH)\"; # OpenSSL's \"config\" script uses a lot of \"uname\"-based target detection...","raw":"debMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; # OpenSSL's \"config\" script uses a lot of \"uname\"-based target detection..."},{"name":"MACHINE=\"$(DPKG-ARCHITECTURE","lineno":83,"args":"--query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='","raw":"MACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='"},{"name":"'","lineno":90,"args":"./config \t\t--openssldir=\"$OPENSSL_CONFIG_DIR\" \t\t--libdir=\"lib/$debMultiarch\" # add -rpath to avoid conflicts between our OpenSSL's \"libssl.so\" and the libssl package by making sure /usr/local/lib is searched first (but only for Erlang/OpenSSL to avoid issues with other tools using libssl; https://github.com/docker-library/rabbitmq/issues/364)","raw":"' \t./config \t\t--openssldir=\"$OPENSSL_CONFIG_DIR\" \t\t--libdir=\"lib/$debMultiarch\" # add -rpath to avoid conflicts between our OpenSSL's \"libssl.so\" and the libssl package by making sure /usr/local/lib is searched first (but only for Erlang/OpenSSL to avoid issues with other tools using libssl; https://github.com/docker-library/rabbitmq/issues/364)"},{"name":"-WL,-RPATH=/USR/LOCAL/LIB","lineno":93,"args":"; # Compile, install OpenSSL, verify that the command-line works & development headers are present","raw":"-Wl,-rpath=/usr/local/lib \t; # Compile, install OpenSSL, verify that the command-line works & development headers are present"},{"name":"MAKE","lineno":99,"args":"-j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \tldconfig; # use Debian's CA certificates","raw":"make -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \tldconfig; # use Debian's CA certificates"},{"name":"RMDIR","lineno":102,"args":"\"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; # smoke test","raw":"rmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; # smoke test"},{"name":"OPENSSL","lineno":108,"args":"version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t# Download, verify & extract OTP_SOURCE","raw":"openssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t# Download, verify & extract OTP_SOURCE"},{"name":"MKDIR","lineno":114,"args":"-p \"$OTP_PATH\"; \twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t# Configure Erlang/OTP for compilation, disable unused features & applications","raw":"mkdir -p \"$OTP_PATH\"; \twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t# Configure Erlang/OTP for compilation, disable unused features & applications"},{"name":"CD","lineno":121,"args":"\"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; # add -rpath to avoid conflicts between our OpenSSL's \"libssl.so\" and the libssl package by making sure /usr/local/lib is searched first (but only for Erlang/OpenSSL to avoid issues with other tools using libssl; https://github.com/docker-library/rabbitmq/issues/364)","raw":"cd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; # add -rpath to avoid conflicts between our OpenSSL's \"libssl.so\" and the libssl package by making sure /usr/local/lib is searched first (but only for Erlang/OpenSSL to avoid issues with other tools using libssl; https://github.com/docker-library/rabbitmq/issues/364)"},{"name":"EXPORT","lineno":160,"args":"CFLAGS=\"$CFLAGS -Wl,-rpath=/usr/local/lib\"; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; # Compile & install Erlang/OTP","raw":"export CFLAGS=\"$CFLAGS -Wl,-rpath=/usr/local/lib\"; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; # Compile & install Erlang/OTP"},{"name":"MAKE","lineno":170,"args":"-j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies","raw":"make -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies"},{"name":"APT-MARK","lineno":183,"args":"auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t# Check that OpenSSL still works after purging build dependencies","raw":"apt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t# Check that OpenSSL still works after purging build dependencies"},{"name":"OPENSSL","lineno":185,"args":"version; # Check that Erlang/OTP crypto & ssl were compiled against OpenSSL correctly","raw":"openssl version; # Check that Erlang/OTP crypto & ssl were compiled against OpenSSL correctly"},{"name":"ERL","lineno":186,"args":"-noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'","raw":"erl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"},{"name":"ENV","lineno":188,"args":{"RABBITMQ_DATA_DIR":"/var/lib/rabbitmq"},"raw":"ENV RABBITMQ_DATA_DIR=/var/lib/rabbitmq"},{"name":"RUN","lineno":196,"args":"set -eux; \tgroupadd --gid 999 --system rabbitmq; \tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie","raw":"RUN set -eux; \tgroupadd --gid 999 --system rabbitmq; \tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"},{"name":"ENV","lineno":199,"args":{"RABBITMQ_VERSION":"3.8.3"},"raw":"ENV RABBITMQ_VERSION 3.8.3"},{"name":"ENV","lineno":201,"args":{"RABBITMQ_PGP_KEY_ID":"\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""},"raw":"ENV RABBITMQ_PGP_KEY_ID=\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""},{"name":"ENV","lineno":202,"args":{"RABBITMQ_HOME":"/opt/rabbitmq"},"raw":"ENV RABBITMQ_HOME=/opt/rabbitmq"},{"name":"ENV","lineno":206,"args":{"PATH":"$RABBITMQ_HOME/sbin:$PATH","RABBITMQ_LOGS":"-"},"raw":"ENV PATH=$RABBITMQ_HOME/sbin:$PATH \tRABBITMQ_LOGS=-"},{"name":"RUN","lineno":236,"args":"set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tca-certificates \t\tgnupg \t\twget \t\txz-utils \t; \trm -rf /var/lib/apt/lists/*; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-latest-toolchain-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; # Do not default SYS_PREFIX to RABBITMQ_HOME, leave it empty","raw":"RUN set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tca-certificates \t\tgnupg \t\twget \t\txz-utils \t; \trm -rf /var/lib/apt/lists/*; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-latest-toolchain-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; # Do not default SYS_PREFIX to RABBITMQ_HOME, leave it empty"},{"name":"GREP","lineno":246,"args":"-qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t# verify assumption of no stale cookies","raw":"grep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t# verify assumption of no stale cookies"},{"name":"[","lineno":248,"args":"! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; # Ensure RabbitMQ was installed correctly by running a few commands that do not depend on a running server, as the rabbitmq user","raw":"[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; # Ensure RabbitMQ was installed correctly by running a few commands that do not depend on a running server, as the rabbitmq user"},{"name":"GOSU","lineno":253,"args":"rabbitmq rabbitmqctl help; \tgosu rabbitmq rabbitmqctl list_ciphers; \tgosu rabbitmq rabbitmq-plugins list; # no stale cookies","raw":"gosu rabbitmq rabbitmqctl help; \tgosu rabbitmq rabbitmqctl list_ciphers; \tgosu rabbitmq rabbitmq-plugins list; # no stale cookies"},{"name":"RM","lineno":254,"args":"\"$RABBITMQ_DATA_DIR/.erlang.cookie\"","raw":"rm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""},{"name":"RUN","lineno":257,"args":"ln -sf /opt/rabbitmq/plugins /plugins","raw":"RUN ln -sf /opt/rabbitmq/plugins /plugins"},{"name":"ENV","lineno":260,"args":{"HOME":"$RABBITMQ_DATA_DIR"},"raw":"ENV HOME $RABBITMQ_DATA_DIR"},{"name":"VOLUME","lineno":262,"args":["$RABBITMQ_DATA_DIR"],"raw":"VOLUME $RABBITMQ_DATA_DIR"},{"name":"ENV","lineno":267,"args":{"LANG":"C.UTF-8","LANGUAGE":"C.UTF-8","LC_ALL":"C.UTF-8"},"raw":"ENV LANG=C.UTF-8 LANGUAGE=C.UTF-8 LC_ALL=C.UTF-8"},{"name":"COPY","lineno":269,"args":["docker-entrypoint.sh","/usr/local/bin/"],"raw":"COPY docker-entrypoint.sh /usr/local/bin/"},{"name":"ENTRYPOINT","lineno":270,"args":["docker-entrypoint.sh"],"raw":"ENTRYPOINT [\"docker-entrypoint.sh\"]"},{"name":"EXPOSE","lineno":272,"args":["4369","5671","5672","25672"],"raw":"EXPOSE 4369 5671 5672 25672"},{"name":"CMD","lineno":273,"args":["rabbitmq-server"],"raw":"CMD [\"rabbitmq-server\"]"}]}